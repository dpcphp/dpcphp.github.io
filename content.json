{"meta":{"title":"CC的博客","subtitle":null,"description":null,"author":"CC","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"hexo","date":"2019-05-08T08:33:16.215Z","updated":"2019-05-08T08:41:06.517Z","comments":true,"path":"2019/05/08/hexo/","link":"","permalink":"http://yoursite.com/2019/05/08/hexo/","excerpt":"","text":"&lt;!DOCTYPE html&gt; hexo搭建github博客 | Zkep &#xF002; 首页 编码 电影 归档 关于 Zkep 编译的人生、确定的轨迹里充满着不确定 2018-03-02 hexo搭建github博客 使用github pages服务搭建博客：全是静态文件，访问速度快；免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；博客内容可以轻松打包、转移、发布到其它平台；等等；准备工作在开始一切之前，你必须已经：有一个github账号，没有的话去注册一个；安装了node.js、npm，并了解相关基础知识；安装了git for windows（或者其它git客户端）搭建github博客创建仓库新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。几个注意的地方：注册的邮箱一定要验证，否则不会成功；仓库名字必须是：username.github.io，其中username是你的用户名；仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。绑定域名当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。首先你要注册一个域名，域名注册以前总是推荐去godaddy，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！绑定域名分2种情况：带www和不带www的。域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。用git bash执行如下命令：1$ cd ~/. ssh #检查本机已存在的ssh密钥如果提示：No such file or directory 说明你是第一次使用git。1$ ssh-keygen -t rsa -C “邮件地址”然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：将刚复制的内容粘贴到key那里，title随便填，保存。测试是否成功1$ ssh -T git@github.com # 注意邮箱地址不用改如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：1Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.看到这个信息说明SSH已配置成功！此时你还需要配置：12$ git config –global user.name “liuxianan”// 你的github用户名，非昵称$ git config –global user.email “xxx@qq.com“// 填写你的github注册邮箱使用hexo写博客hexo简介Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。原理由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。注意事项安装之前先来说几个注意事项：很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的；安装12345$ npm install -g hexo # 全局安装$ cd /home/test.github.io # 在指定目录下新建项目文件夹$ hexo init$ hexo g # 生成$ hexo s # 启动服务hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故修改主题既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题。个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia。首先下载这个主题,放到项目的themes目录修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。上传之前在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。上传到github如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。首先，ssh key肯定要配置好。其次，配置_config.yml中有关deploy的部分：正确写法：1234deploy: type: git repository: git@github.com:xxx/xxx.github.io.git branch: master此时直接执行hexo d的话一般会报如下错误：1Deployer not found: github 或者 Deployer not found: git原因是还需要安装一个插件：1npm install hexo-deployer-git –save常用hexo命令常见命令1234567hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本缩写：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy组合命令：12hexo s -g #生成并本地预览hexo d -g #生成并上传_config.yml这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。写博客定位到我们的hexo根目录，执行命令：1hexo new ‘my-first-blog’hexo会帮我们在_posts下生成相关md文件：我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：一般完整格式如下：123456789—title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面—以下是正文那么hexo new page ‘postName’命令和hexo new ‘postName’有什么区别呢？最终部署时生成：hexo\\public\\my-second-blog\\index.html，但是它不会作为文章出现在博文目录。如何让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？答案是在合适的位置加上&lt;!–more–&gt;即可，例如：12345678910111213# 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!–more–&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等； 分享 codesgit 推荐文章 var random_count =4 var site = {BASE_URI:’/‘}; function load_random_posts(obj) { var arr=site.posts; if (!obj) return; // var count = $(obj).attr(‘data-count’) || 6; for (var i, tmp, n = arr.length; n; i = Math.floor(Math.random() * n), tmp = arr[–n], arr[n] = arr[i], arr[i] = tmp); arr = arr.slice(0, random_count); var html = ‘‘; for(var j=0;j&lt;arr.length;j++){ var item=arr[j]; html += ‘‘ + item.date + ‘:&nbsp;&nbsp;‘ + (item.title || item.uri) + ‘‘; if(item.excerpt){ html +=’‘+item.excerpt+’‘; } html +=’‘; } $(obj).html(html + ‘‘); } $(‘.random_posts_ul’).each(function () { var c = this; if (!site.posts || !site.posts.length){ $.getJSON(site.BASE_URI + ‘js/posts.js’,function(json){site.posts = json;load_random_posts(c)}); } else{ load_random_posts(c); } }); 上一篇 go笔记 文章目录 1. 使用github pages服务搭建博客：1.1. 准备工作1.2. 搭建github博客1.2.1. 创建仓库1.2.2. 绑定域名1.2.3. 配置SSH key1.2.4. 测试是否成功1.3. 使用hexo写博客1.3.1. hexo简介1.3.2. 原理1.3.3. 注意事项1.3.4. 安装1.3.5. 修改主题1.3.6. 上传之前1.3.7. 上传到github1.3.8. 常用hexo命令1.3.9. _config.yml1.3.10. 写博客1.3.11. 如何让博文列表不显示全部内容 &copy; 2014 - 2018 zkep&nbsp;|&nbsp; 主题 Cafe 联系方式&nbsp;|&nbsp;773683464@qq.com 首页 编码 电影 归档 关于 // Elevator script included on the page, already.window.onload = function() { var elevator = new Elevator({ selector:’.back-to-top-btn’, element: document.querySelector(‘.back-to-top-btn’), duration: 1000 // milliseconds });} var cloudTieConfig = { url: document.location.href, sourceId: “”, productKey: “e2fb4051c49842688ce669e634bc983f”, target: “cloud-tie-wrapper” }; MathJax.Hub.Config({ tex2jax: { inlineMath: [ [‘$’,’$’], [“\\(“,”\\)”] ], processEscapes: true, skipTags: [‘script’, ‘noscript’, ‘style’, ‘textarea’, ‘pre’, ‘code’] } }) MathJax.Hub.Queue(function() { var all = MathJax.Hub.getAllJax(), i; for (i=0; i &lt; all.length; i += 1) { all[i].SourceElement().parentNode.className += ‘ has-jax’; } })","categories":[],"tags":[]}]}